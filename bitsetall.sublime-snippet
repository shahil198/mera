<snippet>
	<content><![CDATA[

#include<bits/stdc++.h>
using namespace std;
#define ll long long 
//
// note. if and of any two now (bit is one) then that bit in xor cant't be one;
// 
/*1.ispowoftwo
2.totalbitset
3. total no. of elements from 0 to n which have some equal to xor
4.Sum of two binanary numbers
5. xor fromm 0 to N
6.given sum S and xor X find a and b 
7. given sum X and xor Y find a and b in O(logn)*
8. Given xor and and find or/


/*bool ispowoftwo(int n)
{
	if(n&(n-1))
		return false;
	return true;
}*/

/*int totalbitset(int n)
{
	int count=0;
	while(n)
	{
		count++;
		n=n&(n-1);
	}
	return count;
}*/

/*int sumequaltoxor(int n)
{
	int count=0;
	while(n)
	{
		if(n%2==0)
			count++;
		n/=2;
	}
	return 1<<count;
}*/

/*var getSum=function(a,b) {
    const Sum = a^b; 
    const carry = (a & b) << 1; 
            return Sum
        }
    return getSum(Sum,carry);
}*/
/*int xorfromzero(int n)
{
	int rem=n%4;
	if(rem==0)
	{
     return n;
	}
	else if(rem==1)
	{
      return 1;
	}
	else if(rem==2)
	{
      return n+1;
	}
	else
	{
     return 0;
	}
}*/



/*  This is a simple solution:

One value = (sum + xor)/2;
other value = (sum-xor)/2;



////////////////////////
void compute(unsigned long int S,  
            unsigned long int X) 
{ 
    unsigned long int A = (S - X)/2; 
  
    int a = 0, b = 0; 
  
    // Traverse through all bits 
    for (int i=0; i<8*sizeof(S); i++) 
    { 
        unsigned long int Xi = (X & (1 << i)); 
        unsigned long int Ai = (A & (1 << i)); 
        if (Xi == 0 && Ai == 0) 
        { 
            // Let us leave bits as 0. 
        } 
        else if (Xi == 0 && Ai > 0) 
        { 
            a = ((1 << i) | a);  
            b = ((1 << i) | b);  
        } 
        else if (Xi > 0 && Ai == 0) 
        { 
            a = ((1 << i) | a);  
  
            // We leave i-th bit of b as 0. 
        } 
        else // (Xi == 1 && Ai == 1) 
        { 
            
            return -1; 
        } 
    } 
  
   
} */


/*void findNums(int X, int Y)
{

	
	int A, B;
	if (X < Y) {
	   A=-1;
      B=-1;
	}
	else if (abs(X - Y) & 1) {
		A=-1;
      B=-1;
	}
	else if (X == Y) {
		A = 0;
		B = Y;
	}

	else {
		A = (X - Y) / 2;
		if ((A & Y) == 0) {
			B = (A + Y);
		}
		else {
			A=-1;
          B=-1;
		}
	}
  
}*/


/*8.
//or=xor+and;
int findBitwiseORGivenXORAND(int X, int Y)
{
    return X + Y;
}*/

int main()
{
	
    int n;
    cin>>n;
    cout<<sumequaltoxor();
    
    
    return 0;
}
]]></content>
bitsetall
</snippet>
