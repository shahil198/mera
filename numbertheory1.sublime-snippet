<snippet>
	<content><![CDATA[
#include<bits/stdc++.h>
using namespace std;

//1.prime numbers
//2.Prime divisors
//3.divisors
//4.gcd
//5. lcm
//6. a-> nck or nCk O(n*k)
//6. b-> nck or nCr O(k)
//6. c-> nck or nCr

/*vector<long long > prime;
vector<long long > gm(200005,1);
void getprime(){
for(int i=2;i*i<=200005;i++)
{
	if(gm[i])
	{
		for(int j=i*i;j<200006;j+=i)
		{
			gm[j]=0;
		}
	}
}
for(int i=2;i<=200005;i++)
{
	if(gm[i])
		prime.push_back(i);
}
}*/

/*vector<long long> getprimediv(long long n)
{
 vector<long long int>pd;
 while(n%2==0)
 {
 	pd.push_back(2);
 	n=n/2;
 }
 for(int i=3;i*i<=n;i+=2)
 { 
 	while(n%i==0)
 	{
 		pd.push_back(i);
 		n/=i;
 	}
 }
 if(n!=1)
 	pd.push_back(n);
 return pd;
}
*/

/*vector<long long > getfactor(long long n)
{
	vector<long long> abc;
	for(int i=1;i*i<=n;i++)
	{
		if(n%i==0)
		{
         abc.push_back(i);
         if(i!=n/i)
         {
         	abc.push_back(n/i);
         }
		}
	}
	sort(abc.begin(), abc.end());
	return abc;
}*/

/*long long gcd(long long int a, long long int b)
{
  if (b == 0)
    return a;
  return gcd(b, a % b);
}*/
 
/*// Function to return LCM of two numbers 
long long lcm(int a, int b)
{
    return (a / gcd(a, b)) * b;
}
*/



 

 
// Returns value of Binomial Coefficient C(n, k)
/*long long int binomialCoeff(int n, int k)
{
    long long int C[n + 1][k + 1];
    long long int i, j;
 
    // Caculate value of Binomial Coefficient
    // in bottom up manner
    for (i = 0; i <= n; i++) {
        for (j = 0; j <= min(i, k); j++) {
            // Base Cases
            if (j == 0 || j == i)
                C[i][j] = 1;
 
            // Calculate value using previously
            // stored values
            else
                C[i][j] = C[i - 1][j - 1] + C[i - 1][j];
        }
    }
 
    return C[n][k];
}*/
6.b/*long long int binomialCoeff(long long int n, long long int k)
{
    long long int C[k + 1];
    memset(C, 0, sizeof(C));
 
    C[0] = 1; // nC0 is 1
 
    for (long long int i = 1; i <= n; i++) {
        // Compute next row of pascal triangle using
        // the previous row
        for (long long int j = min(i, k); j > 0; j--)
            C[j] = C[j] + C[j - 1];
    }
    return C[k];
}*/
6.c/*ll funncr(int n,int r)
{
	r=min(r,n-r);
	ll int p=1,k=1;
	if(r)
	{
     while(r)
     {
     	p*=n;
     	k*=r;

     	ll m=__gcd(p,k);
     	p/=m;
     	k/=m;
     	n--;
     	r--;
     }
     return p%1000000007;
	}
	else
		return 1;
}*/

/*{
    long long int res=1;
    while(m)
    {
        if(m%2)
        {
            res*=n;
            res%=1000000007;
            m--;
        }
        else
        {
            n*=n;
            n%=100000007;
            m/=2;
        }
    }
    return res%1000000007;
}*/
]]></content>
	numbertheory1
</snippet>
